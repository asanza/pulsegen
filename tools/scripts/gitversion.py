'''
File: gitversion.py

Copyright (c) 2020 Diego Asanza <f.asanza@gmail.com>

SPDX-License-Identifier: Apache-2.0
'''

#!/usr/bin/env python3

import subprocess
import argparse
import re

if __name__ == "__main__":

  parser = argparse.ArgumentParser(description='get the git id from current repo')
  parser.add_argument('repo_path', help='path to the git repository')
  group = parser.add_mutually_exclusive_group()
  group.add_argument('-a', '--all', action="store_true", help='print the version tag. If no tag, the commit hash is print')
  group.add_argument('-M', '--major', action="store_true", help='print the major tag. If no tag, print 0')
  group.add_argument('-m', '--minor', action="store_true", help='print the minor tag. If no tag, print 0')
  group.add_argument('-P', '--patch', action="store_true", help='print the patch tag. If no tag, print 0')
  group.add_argument('-b', '--branch', action="store_true", help='print the branch.')
  group.add_argument('-s', '--sha', action="store_true", help='print the commit hash.')
  group.add_argument('-f', '--file', help='output to file.')
  args = parser.parse_args()

  try:
    label = str(subprocess.check_output(['git', 'describe', '--tags', '--dirty']).strip())
  except subprocess.CalledProcessError:
    label = None

  try:
    githash = str(subprocess.check_output(['git', 'rev-parse', '--short', 'HEAD']).strip().decode())
  except subprocess.CalledProcessError:
    exit(-1)

  try:
    gitbranch = str(subprocess.check_output(['git', 'rev-parse', '--abbrev-ref', 'HEAD']).strip().decode())
  except subprocess.CalledProcessError:
    exit(-1)


  dirty = None
  if label != None:
    pattern = re.search(r'[0-9]+\.[0-9]+(?:\.[0-9]+)?\b', label)
    tagl = re.search(r'\-\d+\-', label)
    dirty = re.search(r'\s*dirty', label)
  else:
    pattern = None

  versionstr = ''
  major = ''
  minor = ''
  patch = ''

  if dirty != None:
    versionstr = 'dirty_' + githash
    major = '0'
    minor = '0'
    patch = '0'
  elif pattern == None:
    versionstr = githash
    major = '0'
    minor = '0'
    patch = '0'
  else:
    versionstr = pattern.group(0)
    if( tagl != None):
      versionstr = versionstr + tagl.group(0) + githash
    major = pattern.group(0).split('.')[0]
    minor = pattern.group(0).split('.')[1]
    patch = pattern.group(0).split('.')[2]

  if args.file:
    with open(args.file, 'w') as f:
      f.write('/* CMAKE: Auto-generated by gitversion.py. Do not modify */\n')
      f.write('#ifndef GITVERSION_H_\n')
      f.write('#define GITVERSION_H_\n')
      f.write('\n')
      f.write('#define GITVERSION_MAJOR ' + str(major) + '\n')
      f.write('#define GITVERSION_MINOR ' + str(minor) + '\n')
      f.write('#define GITVERSION_PATCH ' + str(patch) + '\n')
      f.write('#define GITVERSION_BRANCH "' + str(gitbranch) + '"\n')
      f.write('#define GITVERSION_HASH "' + str(githash) + '"\n')
      f.write('#define GITVERSION_STR "' + str(versionstr) + '"\n')
      f.write('\n')
      f.write('#endif /*GITVERSION_H_*/' + '\n')
      exit(0)

  if args.major:
    print(str(major))
  elif args.minor:
    print(str(minor))
  elif args.patch:
    print(str(patch))
  elif args.branch:
    print(str(gitbranch))
  elif args.sha:
    print(str(githash))
  else:
    print(str(versionstr))

  exit(0)
